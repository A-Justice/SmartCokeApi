// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartCokeAPI.Models;

namespace SmartCokeAPI.Migrations
{
    [DbContext(typeof(SmartCokeContext))]
    [Migration("20190225105515_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SmartCoke")
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartCokeAPI.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedTime")
                        .IsUnicode(false);

                    b.Property<string>("AreaId")
                        .HasColumnName("AreaID")
                        .IsUnicode(false);

                    b.Property<string>("AreaName")
                        .IsUnicode(false);

                    b.Property<string>("ChargeType")
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("DistrictID")
                        .HasMaxLength(10);

                    b.Property<string>("RegionId")
                        .HasColumnName("RegionID")
                        .IsUnicode(false);

                    b.Property<string>("ServCharge")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Area","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Comolaints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Comolaints");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.CountryCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CountryCodes");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.CustomerDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustCode")
                        .IsUnicode(false);

                    b.Property<string>("Dob")
                        .IsUnicode(false);

                    b.Property<string>("DobDay")
                        .IsUnicode(false);

                    b.Property<string>("DobMonth")
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsUnicode(false);

                    b.Property<string>("Fname")
                        .HasColumnName("FName")
                        .IsUnicode(false);

                    b.Property<string>("Lname")
                        .IsUnicode(false);

                    b.Property<string>("Membership")
                        .IsUnicode(false);

                    b.Property<string>("Orders")
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsUnicode(false);

                    b.Property<string>("PhoneNum")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Uname")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.CustomOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateLogged")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderId")
                        .HasColumnName("OrderID")
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsUnicode(false);

                    b.Property<string>("Quantity")
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .IsUnicode(false);

                    b.Property<string>("Total")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CustomOrders","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.CustomProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedDate")
                        .IsUnicode(false);

                    b.Property<string>("PackSize")
                        .IsUnicode(false);

                    b.Property<string>("ProductId")
                        .HasColumnName("ProductID")
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("UnitAmount")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CustomProducts","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Distributors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedDate")
                        .IsUnicode(false);

                    b.Property<string>("DistribId")
                        .HasColumnName("DistribID")
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("DistrictID")
                        .IsUnicode(false);

                    b.Property<string>("DistrictName")
                        .IsUnicode(false);

                    b.Property<string>("EditedBy")
                        .IsUnicode(false);

                    b.Property<string>("EditedDate")
                        .IsUnicode(false);

                    b.Property<string>("OtcontactNumber")
                        .HasColumnName("OTContactNumber")
                        .IsUnicode(false);

                    b.Property<string>("OtcontactPerson")
                        .HasColumnName("OTContactPerson")
                        .IsUnicode(false);

                    b.Property<string>("Otemail")
                        .HasColumnName("OTEmail")
                        .IsUnicode(false);

                    b.Property<string>("Outlet")
                        .IsUnicode(false);

                    b.Property<string>("RegionId")
                        .HasColumnName("RegionID")
                        .IsUnicode(false);

                    b.Property<string>("Rsmemail")
                        .HasColumnName("RSMEmail")
                        .IsUnicode(false);

                    b.Property<string>("Rsmname")
                        .HasColumnName("RSMName")
                        .IsUnicode(false);

                    b.Property<string>("Rsmnumber")
                        .HasColumnName("RSMNumber")
                        .IsUnicode(false);

                    b.Property<string>("Rssemail")
                        .HasColumnName("RSSEmail")
                        .IsUnicode(false);

                    b.Property<string>("Rssname")
                        .HasColumnName("RSSName")
                        .IsUnicode(false);

                    b.Property<string>("Rssnumber")
                        .HasColumnName("RSSNumber")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Township")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Distributors","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedDate")
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("DistrictID")
                        .IsUnicode(false);

                    b.Property<string>("DistrictName")
                        .IsUnicode(false);

                    b.Property<string>("EditBy")
                        .IsUnicode(false);

                    b.Property<string>("EditTime")
                        .IsUnicode(false);

                    b.Property<string>("RegionId")
                        .HasColumnName("RegionID")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("District","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.EventSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventSize1")
                        .HasColumnName("EventSize")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventSize","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventType1")
                        .HasColumnName("EventType")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventType","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsUnicode(false);

                    b.Property<string>("LoggedDate")
                        .IsUnicode(false);

                    b.Property<string>("OrderId")
                        .HasColumnName("OrderID")
                        .IsUnicode(false);

                    b.Property<string>("Rating")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fname")
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Login","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcqResponseCode")
                        .IsUnicode(false);

                    b.Property<double?>("Amount");

                    b.Property<string>("Area")
                        .IsUnicode(false);

                    b.Property<string>("AuthorizeId")
                        .IsUnicode(false);

                    b.Property<string>("BatchNo")
                        .IsUnicode(false);

                    b.Property<string>("BtbankName")
                        .HasColumnName("BTBankName")
                        .IsUnicode(false);

                    b.Property<string>("Btdate")
                        .HasColumnName("BTDate")
                        .IsUnicode(false);

                    b.Property<string>("Btrefrence")
                        .HasColumnName("BTRefrence")
                        .IsUnicode(false);

                    b.Property<string>("Card")
                        .IsUnicode(false);

                    b.Property<string>("CountCode")
                        .IsUnicode(false);

                    b.Property<string>("CscResultCode")
                        .HasColumnName("cscResultCode")
                        .IsUnicode(false);

                    b.Property<string>("CscResultCodeDesc")
                        .HasColumnName("cscResultCodeDesc")
                        .IsUnicode(false);

                    b.Property<string>("CustId")
                        .HasColumnName("CustID")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DeliveryMail")
                        .IsUnicode(false);

                    b.Property<string>("DistributorAmount")
                        .IsUnicode(false);

                    b.Property<string>("DistributorId")
                        .HasColumnName("DistributorID")
                        .IsUnicode(false);

                    b.Property<string>("DistributorName")
                        .IsUnicode(false);

                    b.Property<string>("District")
                        .IsUnicode(false);

                    b.Property<string>("DistrictId")
                        .HasColumnName("DistrictID")
                        .IsUnicode(false);

                    b.Property<string>("Dseci")
                        .HasColumnName("DSECI")
                        .IsUnicode(false);

                    b.Property<string>("Dsenrolled")
                        .HasColumnName("DSenrolled")
                        .IsUnicode(false);

                    b.Property<string>("Dsstatus")
                        .HasColumnName("DSstatus")
                        .IsUnicode(false);

                    b.Property<string>("Dsxid")
                        .HasColumnName("DSXID")
                        .IsUnicode(false);

                    b.Property<string>("Duration")
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsUnicode(false);

                    b.Property<string>("EpicorStatus")
                        .IsUnicode(false);

                    b.Property<string>("EventSize")
                        .IsUnicode(false);

                    b.Property<string>("EventType")
                        .IsUnicode(false);

                    b.Property<string>("Fname")
                        .HasColumnName("FName")
                        .IsUnicode(false);

                    b.Property<string>("GhanaPostGps")
                        .HasColumnName("GhanaPostGPS")
                        .IsUnicode(false);

                    b.Property<string>("Lname")
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .IsUnicode(false);

                    b.Property<DateTime?>("LoggedDate")
                        .HasColumnType("date");

                    b.Property<string>("LoyalytyPoint")
                        .IsUnicode(false);

                    b.Property<string>("MailStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MerchTxnRef")
                        .IsUnicode(false);

                    b.Property<string>("Merchant")
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsUnicode(false);

                    b.Property<string>("Momonetwork")
                        .HasColumnName("MOMONetwork")
                        .IsUnicode(false);

                    b.Property<string>("Momonumber")
                        .HasColumnName("MOMONumber")
                        .IsUnicode(false);

                    b.Property<string>("OrderId")
                        .HasColumnName("OrderID")
                        .IsUnicode(false);

                    b.Property<string>("OrderInfo")
                        .IsUnicode(false);

                    b.Property<string>("Package")
                        .IsUnicode(false);

                    b.Property<string>("PaidAmount")
                        .IsUnicode(false);

                    b.Property<string>("PaymentType")
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false);

                    b.Property<string>("PromoCode")
                        .IsUnicode(false);

                    b.Property<string>("ReceiptErrorMessage")
                        .IsUnicode(false);

                    b.Property<string>("ReceiptNo")
                        .IsUnicode(false);

                    b.Property<string>("ReferenceDetails")
                        .IsUnicode(false);

                    b.Property<string>("ReferenceType")
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .IsUnicode(false);

                    b.Property<string>("RiskOverallResult")
                        .IsUnicode(false);

                    b.Property<string>("Rsvpname")
                        .HasColumnName("RSVPname")
                        .IsUnicode(false);

                    b.Property<string>("Rsvpnumber")
                        .HasColumnName("RSVPNumber")
                        .IsUnicode(false);

                    b.Property<string>("ServCharge")
                        .IsUnicode(false);

                    b.Property<string>("ShareAcoke")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("TotalAmount")
                        .IsUnicode(false);

                    b.Property<string>("TransactionNo")
                        .IsUnicode(false);

                    b.Property<string>("TxnResponseCode")
                        .IsUnicode(false);

                    b.Property<string>("TxnResponseCodeDesc")
                        .IsUnicode(false);

                    b.Property<string>("TxnReversalResult")
                        .IsUnicode(false);

                    b.Property<string>("Venue")
                        .IsUnicode(false);

                    b.Property<string>("VerSecurityLevel")
                        .IsUnicode(false);

                    b.Property<string>("VerStatus")
                        .IsUnicode(false);

                    b.Property<string>("VerToken")
                        .IsUnicode(false);

                    b.Property<string>("VerType")
                        .IsUnicode(false);

                    b.Property<string>("Volume")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Orders","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.PackageBreakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedDate")
                        .IsUnicode(false);

                    b.Property<string>("PackSize")
                        .IsUnicode(false);

                    b.Property<string>("PackageName")
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsUnicode(false);

                    b.Property<string>("Quantity")
                        .IsUnicode(false);

                    b.Property<string>("Total")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PackageBreakdown");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Packages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PackageAmount");

                    b.Property<string>("PackageDesc")
                        .IsUnicode(false);

                    b.Property<string>("PackageName")
                        .IsUnicode(false);

                    b.Property<int?>("PackageNumber");

                    b.Property<string>("PackageText")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Volume")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Packages","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.PackSizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .IsUnicode(false);

                    b.Property<string>("ProductId")
                        .HasColumnName("ProductID")
                        .IsUnicode(false);

                    b.Property<string>("Quantity")
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .IsUnicode(false);

                    b.Property<string>("SizeId")
                        .HasColumnName("SizeID")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PackSizes","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.PromoCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .IsUnicode(false);

                    b.Property<string>("OrganisationContact")
                        .IsUnicode(false);

                    b.Property<string>("OrganisationEmail")
                        .IsUnicode(false);

                    b.Property<string>("OrganisationName")
                        .IsUnicode(false);

                    b.Property<string>("ProjectedOrders")
                        .IsUnicode(false);

                    b.Property<string>("PromoId")
                        .HasColumnName("PromoID")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PromoCodes","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionId")
                        .HasColumnName("RegionID")
                        .IsUnicode(false);

                    b.Property<string>("RegionName")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Region","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.Screference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mamlade")
                        .IsUnicode(false);

                    b.Property<string>("ReferenceName")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SCreference","dbo");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.ServiceCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy")
                        .IsUnicode(false);

                    b.Property<string>("AddedDate")
                        .IsUnicode(false);

                    b.Property<string>("Definiton")
                        .IsUnicode(false);

                    b.Property<string>("ServChrgAmt")
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ServiceCharge");
                });

            modelBuilder.Entity("SmartCokeAPI.Models.District", b =>
                {
                    b.HasOne("SmartCokeAPI.Models.District", "IdNavigation")
                        .WithOne("InverseIdNavigation")
                        .HasForeignKey("SmartCokeAPI.Models.District", "Id")
                        .HasConstraintName("FK_District_District");
                });
#pragma warning restore 612, 618
        }
    }
}
